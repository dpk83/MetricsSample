// <auto-generated/>
#nullable enable

    using System;
    using System.Collections.Generic;
    using Microsoft.Cloud.InstrumentationFramework.Metrics.Extensions;
    using Microsoft.R9.Extensions.Meter;
    using Microsoft.R9.Extensions.Meter.Geneva;

    namespace MetricsBench
    {
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public static partial class Metric 
        {
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Microsoft.R9.Extensions.Meter.ICounterMetric<long> Create5dCounter(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k2, string k3, string k4, string k5)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter5D(meterOptions, "Counter5D", k1, k2, k3, k4, k5);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Microsoft.R9.Extensions.Meter.ICounterMetric<long> Create10dCounter(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k2, string k3, string k4, string k5, string k6, string k7, string k8, string k9, string k10)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter10D(meterOptions, "Counter10D", k1, k2, k3, k4, k5, k6, k7, k8, k9, k10);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Microsoft.R9.Extensions.Meter.ICounterMetric<long> Create5dCounterNullDim(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k2, string k3, string k4, string k5)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter5DNullDim(meterOptions, "Counter5DNullDim", k1, k2, k3, k4, k5);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Microsoft.R9.Extensions.Meter.ICounterMetric<long> Create5dCounter1Change(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k2, string k4, string k5)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter5D1Change(meterOptions, "Counter5D1Change", k1, k2, k4, k5);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Microsoft.R9.Extensions.Meter.ICounterMetric<long> Create5dCounter3Change(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k4)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter5D3Change(meterOptions, "Counter5D3Change", k1, k4);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Microsoft.R9.Extensions.Meter.ICounterMetric<long> Create10dCounter3Change(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k4, string k6, string k7, string k8, string k9, string k10)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter10D3Change(meterOptions, "Counter10D3Change", k1, k4, k6, k7, k8, k9, k10);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Microsoft.R9.Extensions.Meter.ICounterMetric<long> Create10dCounter5Change(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k4, string k6, string k8, string k10)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter10D5Change(meterOptions, "Counter10D5Change", k1, k4, k6, k8, k10);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Microsoft.R9.Extensions.Meter.ICounterMetric<long> Create10dCounter10Change(Microsoft.R9.Extensions.Meter.IMeter meter)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter10D10Change(meterOptions, "Counter10D10Change");
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter5D : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues5D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues5D, ulong> CumulativeMetric { get; }

            public Counter5D
                (IMdmCumulativeMetric<DimensionValues5D, ulong> cumulativeMetric 
                , string k1, string k2, string k3, string k4, string k5)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[5]; 
                _staticValArray = new string[5];

                _dynamicKeyArray = new string[0];  
                _dynamicValArray = new string[0];

                
                _staticKeyArray[0] = "k1";
                _staticValArray[0] = k1;
                _staticKeyArray[1] = "k2";
                _staticValArray[1] = k2;
                _staticKeyArray[2] = "k3";
                _staticValArray[2] = k3;
                _staticKeyArray[3] = "k4";
                _staticValArray[3] = k4;
                _staticKeyArray[4] = "k5";
                _staticValArray[4] = k5;
            }
            
            public string this[string key]
            {
                set
                {
                    switch(key)
                    {

                        default: throw new ArgumentOutOfRangeException(nameof(key));
                    }
                }
            }
            
            

            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _staticValArray[3], _staticValArray[4]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter10D : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues10D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues10D, ulong> CumulativeMetric { get; }

            public Counter10D
                (IMdmCumulativeMetric<DimensionValues10D, ulong> cumulativeMetric 
                , string k1, string k2, string k3, string k4, string k5, string k6, string k7, string k8, string k9, string k10)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[10]; 
                _staticValArray = new string[10];

                _dynamicKeyArray = new string[0];  
                _dynamicValArray = new string[0];

                
                _staticKeyArray[0] = "k1";
                _staticValArray[0] = k1;
                _staticKeyArray[1] = "k2";
                _staticValArray[1] = k2;
                _staticKeyArray[2] = "k3";
                _staticValArray[2] = k3;
                _staticKeyArray[3] = "k4";
                _staticValArray[3] = k4;
                _staticKeyArray[4] = "k5";
                _staticValArray[4] = k5;
                _staticKeyArray[5] = "k6";
                _staticValArray[5] = k6;
                _staticKeyArray[6] = "k7";
                _staticValArray[6] = k7;
                _staticKeyArray[7] = "k8";
                _staticValArray[7] = k8;
                _staticKeyArray[8] = "k9";
                _staticValArray[8] = k9;
                _staticKeyArray[9] = "k10";
                _staticValArray[9] = k10;
            }
            
            public string this[string key]
            {
                set
                {
                    switch(key)
                    {

                        default: throw new ArgumentOutOfRangeException(nameof(key));
                    }
                }
            }
            
            

            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _staticValArray[3], _staticValArray[4], _staticValArray[5], _staticValArray[6], _staticValArray[7], _staticValArray[8], _staticValArray[9]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter5DNullDim : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues5D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues5D, ulong> CumulativeMetric { get; }

            public Counter5DNullDim
                (IMdmCumulativeMetric<DimensionValues5D, ulong> cumulativeMetric 
                , string k1, string k2, string k3, string k4, string k5)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[5]; 
                _staticValArray = new string[5];

                _dynamicKeyArray = new string[0];  
                _dynamicValArray = new string[0];

                
                _staticKeyArray[0] = "k1";
                _staticValArray[0] = k1;
                _staticKeyArray[1] = "k2";
                _staticValArray[1] = k2;
                _staticKeyArray[2] = "k3";
                _staticValArray[2] = k3;
                _staticKeyArray[3] = "k4";
                _staticValArray[3] = k4;
                _staticKeyArray[4] = "k5";
                _staticValArray[4] = k5;
            }
            
            public string this[string key]
            {
                set
                {
                    switch(key)
                    {

                        default: throw new ArgumentOutOfRangeException(nameof(key));
                    }
                }
            }
            
            

            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _staticValArray[3], _staticValArray[4]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter5D1Change : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues5D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues5D, ulong> CumulativeMetric { get; }

            public Counter5D1Change
                (IMdmCumulativeMetric<DimensionValues5D, ulong> cumulativeMetric 
                , string k1, string k2, string k4, string k5)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[4]; 
                _staticValArray = new string[4];

                _dynamicKeyArray = new string[1];  
                _dynamicValArray = new string[1];

                
                _staticKeyArray[0] = "k1";
                _staticValArray[0] = k1;
                _staticKeyArray[1] = "k2";
                _staticValArray[1] = k2;
                _staticKeyArray[2] = "k4";
                _staticValArray[2] = k4;
                _staticKeyArray[3] = "k5";
                _staticValArray[3] = k5;

                _dynamicKeyArray[0] = "k3";
                _dynamicValArray[0] = k3;
            }
            
            public string k3
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            public string this[string key]
            {
                set
                {
                    switch(key)
                    {

                        case "k3": k3 = value;return;
                        default: throw new ArgumentOutOfRangeException(nameof(key));
                    }
                }
            }
            
            
            public void Add(long value, string k3)
            {
                
                this.k3 = k3;
                Add(value);
            }

            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _staticValArray[3], _dynamicValArray[0]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter5D3Change : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues5D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues5D, ulong> CumulativeMetric { get; }

            public Counter5D3Change
                (IMdmCumulativeMetric<DimensionValues5D, ulong> cumulativeMetric 
                , string k1, string k4)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[2]; 
                _staticValArray = new string[2];

                _dynamicKeyArray = new string[3];  
                _dynamicValArray = new string[3];

                
                _staticKeyArray[0] = "k1";
                _staticValArray[0] = k1;
                _staticKeyArray[1] = "k4";
                _staticValArray[1] = k4;

                _dynamicKeyArray[0] = "k2";
                _dynamicValArray[0] = k2;

                _dynamicKeyArray[1] = "k3";
                _dynamicValArray[1] = k3;

                _dynamicKeyArray[2] = "k5";
                _dynamicValArray[2] = k5;
            }
            
            public string k2
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            public string k3
            {
                get => _dynamicValArray[1];
                set { if (_dynamicValArray[1] != value) { _dynamicValArray[1] = value; _isDirty = true; } }
            }
            public string k5
            {
                get => _dynamicValArray[2];
                set { if (_dynamicValArray[2] != value) { _dynamicValArray[2] = value; _isDirty = true; } }
            }
            public string this[string key]
            {
                set
                {
                    switch(key)
                    {

                        case "k2": k2 = value;return;
                        case "k3": k3 = value;return;
                        case "k5": k5 = value;return;
                        default: throw new ArgumentOutOfRangeException(nameof(key));
                    }
                }
            }
            
            
            public void Add(long value, string k2, string k3, string k5)
            {
                
                this.k2 = k2;
                this.k3 = k3;
                this.k5 = k5;
                Add(value);
            }

            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _dynamicValArray[0], _dynamicValArray[1], _dynamicValArray[2]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter10D3Change : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues10D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues10D, ulong> CumulativeMetric { get; }

            public Counter10D3Change
                (IMdmCumulativeMetric<DimensionValues10D, ulong> cumulativeMetric 
                , string k1, string k4, string k6, string k7, string k8, string k9, string k10)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[7]; 
                _staticValArray = new string[7];

                _dynamicKeyArray = new string[3];  
                _dynamicValArray = new string[3];

                
                _staticKeyArray[0] = "k1";
                _staticValArray[0] = k1;
                _staticKeyArray[1] = "k4";
                _staticValArray[1] = k4;
                _staticKeyArray[2] = "k6";
                _staticValArray[2] = k6;
                _staticKeyArray[3] = "k7";
                _staticValArray[3] = k7;
                _staticKeyArray[4] = "k8";
                _staticValArray[4] = k8;
                _staticKeyArray[5] = "k9";
                _staticValArray[5] = k9;
                _staticKeyArray[6] = "k10";
                _staticValArray[6] = k10;

                _dynamicKeyArray[0] = "k2";
                _dynamicValArray[0] = k2;

                _dynamicKeyArray[1] = "k3";
                _dynamicValArray[1] = k3;

                _dynamicKeyArray[2] = "k5";
                _dynamicValArray[2] = k5;
            }
            
            public string k2
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            public string k3
            {
                get => _dynamicValArray[1];
                set { if (_dynamicValArray[1] != value) { _dynamicValArray[1] = value; _isDirty = true; } }
            }
            public string k5
            {
                get => _dynamicValArray[2];
                set { if (_dynamicValArray[2] != value) { _dynamicValArray[2] = value; _isDirty = true; } }
            }
            public string this[string key]
            {
                set
                {
                    switch(key)
                    {

                        case "k2": k2 = value;return;
                        case "k3": k3 = value;return;
                        case "k5": k5 = value;return;
                        default: throw new ArgumentOutOfRangeException(nameof(key));
                    }
                }
            }
            
            
            public void Add(long value, string k2, string k3, string k5)
            {
                
                this.k2 = k2;
                this.k3 = k3;
                this.k5 = k5;
                Add(value);
            }

            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _staticValArray[3], _staticValArray[4], _staticValArray[5], _staticValArray[6], _dynamicValArray[0], _dynamicValArray[1], _dynamicValArray[2]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter10D5Change : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues10D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues10D, ulong> CumulativeMetric { get; }

            public Counter10D5Change
                (IMdmCumulativeMetric<DimensionValues10D, ulong> cumulativeMetric 
                , string k1, string k4, string k6, string k8, string k10)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[5]; 
                _staticValArray = new string[5];

                _dynamicKeyArray = new string[5];  
                _dynamicValArray = new string[5];

                
                _staticKeyArray[0] = "k1";
                _staticValArray[0] = k1;
                _staticKeyArray[1] = "k4";
                _staticValArray[1] = k4;
                _staticKeyArray[2] = "k6";
                _staticValArray[2] = k6;
                _staticKeyArray[3] = "k8";
                _staticValArray[3] = k8;
                _staticKeyArray[4] = "k10";
                _staticValArray[4] = k10;

                _dynamicKeyArray[0] = "k2";
                _dynamicValArray[0] = k2;

                _dynamicKeyArray[1] = "k3";
                _dynamicValArray[1] = k3;

                _dynamicKeyArray[2] = "k5";
                _dynamicValArray[2] = k5;

                _dynamicKeyArray[3] = "k7";
                _dynamicValArray[3] = k7;

                _dynamicKeyArray[4] = "k9";
                _dynamicValArray[4] = k9;
            }
            
            public string k2
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            public string k3
            {
                get => _dynamicValArray[1];
                set { if (_dynamicValArray[1] != value) { _dynamicValArray[1] = value; _isDirty = true; } }
            }
            public string k5
            {
                get => _dynamicValArray[2];
                set { if (_dynamicValArray[2] != value) { _dynamicValArray[2] = value; _isDirty = true; } }
            }
            public string k7
            {
                get => _dynamicValArray[3];
                set { if (_dynamicValArray[3] != value) { _dynamicValArray[3] = value; _isDirty = true; } }
            }
            public string k9
            {
                get => _dynamicValArray[4];
                set { if (_dynamicValArray[4] != value) { _dynamicValArray[4] = value; _isDirty = true; } }
            }
            public string this[string key]
            {
                set
                {
                    switch(key)
                    {

                        case "k2": k2 = value;return;
                        case "k3": k3 = value;return;
                        case "k5": k5 = value;return;
                        case "k7": k7 = value;return;
                        case "k9": k9 = value;return;
                        default: throw new ArgumentOutOfRangeException(nameof(key));
                    }
                }
            }
            
            
            public void Add(long value, string k2, string k3, string k5, string k7, string k9)
            {
                
                this.k2 = k2;
                this.k3 = k3;
                this.k5 = k5;
                this.k7 = k7;
                this.k9 = k9;
                Add(value);
            }

            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _staticValArray[3], _staticValArray[4], _dynamicValArray[0], _dynamicValArray[1], _dynamicValArray[2], _dynamicValArray[3], _dynamicValArray[4]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter10D10Change : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues10D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues10D, ulong> CumulativeMetric { get; }

            public Counter10D10Change
                (IMdmCumulativeMetric<DimensionValues10D, ulong> cumulativeMetric 
                )
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[0]; 
                _staticValArray = new string[0];

                _dynamicKeyArray = new string[10];  
                _dynamicValArray = new string[10];

                

                _dynamicKeyArray[0] = "k1";
                _dynamicValArray[0] = k1;

                _dynamicKeyArray[1] = "k4";
                _dynamicValArray[1] = k4;

                _dynamicKeyArray[2] = "k6";
                _dynamicValArray[2] = k6;

                _dynamicKeyArray[3] = "k8";
                _dynamicValArray[3] = k8;

                _dynamicKeyArray[4] = "k10";
                _dynamicValArray[4] = k10;

                _dynamicKeyArray[5] = "k2";
                _dynamicValArray[5] = k2;

                _dynamicKeyArray[6] = "k3";
                _dynamicValArray[6] = k3;

                _dynamicKeyArray[7] = "k5";
                _dynamicValArray[7] = k5;

                _dynamicKeyArray[8] = "k7";
                _dynamicValArray[8] = k7;

                _dynamicKeyArray[9] = "k9";
                _dynamicValArray[9] = k9;
            }
            
            public string k1
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            public string k4
            {
                get => _dynamicValArray[1];
                set { if (_dynamicValArray[1] != value) { _dynamicValArray[1] = value; _isDirty = true; } }
            }
            public string k6
            {
                get => _dynamicValArray[2];
                set { if (_dynamicValArray[2] != value) { _dynamicValArray[2] = value; _isDirty = true; } }
            }
            public string k8
            {
                get => _dynamicValArray[3];
                set { if (_dynamicValArray[3] != value) { _dynamicValArray[3] = value; _isDirty = true; } }
            }
            public string k10
            {
                get => _dynamicValArray[4];
                set { if (_dynamicValArray[4] != value) { _dynamicValArray[4] = value; _isDirty = true; } }
            }
            public string k2
            {
                get => _dynamicValArray[5];
                set { if (_dynamicValArray[5] != value) { _dynamicValArray[5] = value; _isDirty = true; } }
            }
            public string k3
            {
                get => _dynamicValArray[6];
                set { if (_dynamicValArray[6] != value) { _dynamicValArray[6] = value; _isDirty = true; } }
            }
            public string k5
            {
                get => _dynamicValArray[7];
                set { if (_dynamicValArray[7] != value) { _dynamicValArray[7] = value; _isDirty = true; } }
            }
            public string k7
            {
                get => _dynamicValArray[8];
                set { if (_dynamicValArray[8] != value) { _dynamicValArray[8] = value; _isDirty = true; } }
            }
            public string k9
            {
                get => _dynamicValArray[9];
                set { if (_dynamicValArray[9] != value) { _dynamicValArray[9] = value; _isDirty = true; } }
            }
            public string this[string key]
            {
                set
                {
                    switch(key)
                    {

                        case "k1": k1 = value;return;
                        case "k4": k4 = value;return;
                        case "k6": k6 = value;return;
                        case "k8": k8 = value;return;
                        case "k10": k10 = value;return;
                        case "k2": k2 = value;return;
                        case "k3": k3 = value;return;
                        case "k5": k5 = value;return;
                        case "k7": k7 = value;return;
                        case "k9": k9 = value;return;
                        default: throw new ArgumentOutOfRangeException(nameof(key));
                    }
                }
            }
            
            
            public void Add(long value, string k1, string k4, string k6, string k8, string k10, string k2, string k3, string k5, string k7, string k9)
            {
                
                this.k1 = k1;
                this.k4 = k4;
                this.k6 = k6;
                this.k8 = k8;
                this.k10 = k10;
                this.k2 = k2;
                this.k3 = k3;
                this.k5 = k5;
                this.k7 = k7;
                this.k9 = k9;
                Add(value);
            }

            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_dynamicValArray[0], _dynamicValArray[1], _dynamicValArray[2], _dynamicValArray[3], _dynamicValArray[4], _dynamicValArray[5], _dynamicValArray[6], _dynamicValArray[7], _dynamicValArray[8], _dynamicValArray[9]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
    }
    