// <auto-generated/>
#nullable enable


    namespace MetricsBench
    {
        
    using System;
    using System.Collections.Generic;
    using Microsoft.Cloud.InstrumentationFramework.Metrics.Extensions;
    using Microsoft.R9.Extensions.Meter;
    using Microsoft.R9.Extensions.Meter.Geneva;

        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public static partial class Metric 
        {
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Counter5D Create5dCounter(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k2, string k3, string k4, string k5)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter5D(meterOptions, "counter5d", k1, k2, k3, k4, k5);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Counter10D Create10dCounter(Microsoft.R9.Extensions.Meter.IMeter meter, string k1, string k2, string k3, string k4, string k5, string k6, string k7, string k8, string k9, string k10)
            {
                GenevaMeter genevaMeter = meter as GenevaMeter;
                MeterOptions meterOptions = genevaMeter.MeterOptions;
                return GeneratedCounterMetricFactory.CreateCounter10D(meterOptions, "counter10d", k1, k2, k3, k4, k5, k6, k7, k8, k9, k10);
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter5D : ICounterMetric<long>
        {
            private string[] _keyArray;
            private string[] _valArray;

            private DimensionValues5D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues5D, ulong> CumulativeMetric { get; }

            public Counter5D
                (IMdmCumulativeMetric<DimensionValues5D, ulong> cumulativeMetric, 
                string k1, string k2, string k3, string k4, string k5)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                int count = 5;
                _keyArray = new string[count];
                _valArray = new string[count];

                
                _keyArray[0] = "k1";
                _valArray[0] = k1;
                _keyArray[1] = "k2";
                _valArray[1] = k2;
                _keyArray[2] = "k3";
                _valArray[2] = k3;
                _keyArray[3] = "k4";
                _valArray[3] = k4;
                _keyArray[4] = "k5";
                _valArray[4] = k5;
            }
            
            public string k1
            {
                get => _valArray[0];
                set { _valArray[0] = value; _isDirty = true; }
            }
            public string k2
            {
                get => _valArray[1];
                set { _valArray[1] = value; _isDirty = true; }
            }
            public string k3
            {
                get => _valArray[2];
                set { _valArray[2] = value; _isDirty = true; }
            }
            public string k4
            {
                get => _valArray[3];
                set { _valArray[3] = value; _isDirty = true; }
            }
            public string k5
            {
                get => _valArray[4];
                set { _valArray[4] = value; _isDirty = true; }
            }
            
            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_valArray[0], _valArray[1], _valArray[2], _valArray[3], _valArray[4]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class Counter10D : ICounterMetric<long>
        {
            private string[] _keyArray;
            private string[] _valArray;

            private DimensionValues10D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues10D, ulong> CumulativeMetric { get; }

            public Counter10D
                (IMdmCumulativeMetric<DimensionValues10D, ulong> cumulativeMetric, 
                string k1, string k2, string k3, string k4, string k5, string k6, string k7, string k8, string k9, string k10)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                int count = 10;
                _keyArray = new string[count];
                _valArray = new string[count];

                
                _keyArray[0] = "k1";
                _valArray[0] = k1;
                _keyArray[1] = "k2";
                _valArray[1] = k2;
                _keyArray[2] = "k3";
                _valArray[2] = k3;
                _keyArray[3] = "k4";
                _valArray[3] = k4;
                _keyArray[4] = "k5";
                _valArray[4] = k5;
                _keyArray[5] = "k6";
                _valArray[5] = k6;
                _keyArray[6] = "k7";
                _valArray[6] = k7;
                _keyArray[7] = "k8";
                _valArray[7] = k8;
                _keyArray[8] = "k9";
                _valArray[8] = k9;
                _keyArray[9] = "k10";
                _valArray[9] = k10;
            }
            
            public string k1
            {
                get => _valArray[0];
                set { _valArray[0] = value; _isDirty = true; }
            }
            public string k2
            {
                get => _valArray[1];
                set { _valArray[1] = value; _isDirty = true; }
            }
            public string k3
            {
                get => _valArray[2];
                set { _valArray[2] = value; _isDirty = true; }
            }
            public string k4
            {
                get => _valArray[3];
                set { _valArray[3] = value; _isDirty = true; }
            }
            public string k5
            {
                get => _valArray[4];
                set { _valArray[4] = value; _isDirty = true; }
            }
            public string k6
            {
                get => _valArray[5];
                set { _valArray[5] = value; _isDirty = true; }
            }
            public string k7
            {
                get => _valArray[6];
                set { _valArray[6] = value; _isDirty = true; }
            }
            public string k8
            {
                get => _valArray[7];
                set { _valArray[7] = value; _isDirty = true; }
            }
            public string k9
            {
                get => _valArray[8];
                set { _valArray[8] = value; _isDirty = true; }
            }
            public string k10
            {
                get => _valArray[9];
                set { _valArray[9] = value; _isDirty = true; }
            }
            
            public void Add(long value)
            {
                if (value != 0)
                {
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_valArray[0], _valArray[1], _valArray[2], _valArray[3], _valArray[4], _valArray[5], _valArray[6], _valArray[7], _valArray[8], _valArray[9]);
                        _isDirty = false;
                    }

                    _ = value > 0
                        ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                        : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                }
            }
            
        }
        
    }
    