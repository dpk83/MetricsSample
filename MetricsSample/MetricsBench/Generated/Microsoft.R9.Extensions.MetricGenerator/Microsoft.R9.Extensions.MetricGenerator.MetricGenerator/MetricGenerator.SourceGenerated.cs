// <auto-generated/>
#nullable enable

    using System;
    using System.Collections.Generic;
    using Microsoft.Cloud.InstrumentationFramework.Metrics.Extensions;
    using Microsoft.R9.Extensions.Meter;
    using Microsoft.R9.Extensions.Meter.Geneva;

    namespace MetricsBench
    {
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public static partial class Metric 
        {
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial RequestCounter CreateRequestCounter(Microsoft.R9.Extensions.Meter.IMeter meter, string env, string host, string region)
            {
                return GeneratedCounterMetricFactory.CreateRequestCounter(meter, env, host, region);
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class RequestCounter : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues5D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues5D, ulong> CumulativeMetric { get; }

            public RequestCounter
                (IMdmCumulativeMetric<DimensionValues5D, ulong> cumulativeMetric 
                , string env, string host, string region)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[3]; 
                _staticValArray = new string[3];

                _dynamicKeyArray = new string[2];  
                _dynamicValArray = new string[2];

                
                _staticKeyArray[0] = "env";
                _staticValArray[0] = env;
                _staticKeyArray[1] = "host";
                _staticValArray[1] = host;
                _staticKeyArray[2] = "region";
                _staticValArray[2] = region;

                _dynamicKeyArray[0] = "tenantId";

                _dynamicKeyArray[1] = "requestName";
            }
            
            private string tenantId
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            private string requestName
            {
                get => _dynamicValArray[1];
                set { if (_dynamicValArray[1] != value) { _dynamicValArray[1] = value; _isDirty = true; } }
            }
            
            public void Add(long value, string tenantId, string requestName)
            {
                if (value != 0)
                {
                    
                    this.tenantId = tenantId;
                    this.requestName = requestName;
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _dynamicValArray[0], _dynamicValArray[1]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
    }
    