// <auto-generated/>
#nullable enable
    using Microsoft.Cloud.InstrumentationFramework.Metrics.Extensions;
    using Microsoft.R9.Extensions.Meter;
    using Microsoft.R9.Extensions.Meter.Geneva;
    using System.Collections.Concurrent;

    namespace MetricsBench
    {
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public static partial class GeneratedCounterMetricFactory
        {
            private static readonly ConcurrentDictionary<string, ICounterMetric<long>> _longCounterMetrics = new ();
            private static readonly ConcurrentDictionary<string, IValueRecorderMetric<long>> _longValueRecorderMetrics = new ();
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static RequestCounter CreateRequestCounter(Microsoft.R9.Extensions.Meter.IMeter meter, string env, string host, string region)
            {
                string metricName = "RequestCounter";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return counterMetric as RequestCounter;
                }

                GenevaMeter genevaMeter = meter as GenevaMeter;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                , "env", "host", "region"
                                                , "tenantId", "requestName");

                    return new RequestCounter(cumulativeMetric, env, host, region);
                });

                return metric as RequestCounter;
            }

        }
    
    }
    