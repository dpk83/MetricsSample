using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;

namespace Microsoft.R9.Extensions.MetricGenerator
{
    public partial class MetricGenerator
    {
        internal class Emitter
        {
            private readonly Stack<StringBuilder> _builders = new();
            private readonly bool _pascalCaseArguments;
            private readonly string _fieldName;
            private const string InternalNamespace = "MetricGenerator.Internal";

            public Emitter(bool pascalCaseArguments = false, string fieldName = "_meter")
            {
                _pascalCaseArguments = pascalCaseArguments;
                _fieldName = fieldName;
            }

            public string Emit(IReadOnlyList<CounterClass> counterClasses, CancellationToken cancellationToken)
            {
                var sb = GetStringBuilder();
                try
                {
                    _ = sb.Append("// <auto-generated/>\n");
                    _ = sb.Append("#nullable enable\n");

                    foreach (var counterClass in counterClasses)
                    {
                        // _ = sb.Append("[DEEPAK] In CounterClass loop\n");

                        cancellationToken.ThrowIfCancellationRequested();
                        _ = sb.Append(GenType(counterClass));
                    }

                    return sb.ToString();
                }
                finally
                {
                    ReturnStringBuilder(sb);
                }
            }

            private string GenType(CounterClass counterClass)
            {
                var sb = GetStringBuilder();
                try
                {
                    _ = sb.Append(GenCounterCreateMethods(counterClass));

                    foreach (var counterMethod in counterClass.Methods)
                    {
                        _ = sb.Append(GenCounterClass(counterMethod));
                    }

                    if (string.IsNullOrWhiteSpace(counterClass.Namespace))
                    {
                        return sb.ToString();
                    }

                    return $@"
    namespace {counterClass.Namespace}
    {{
        {sb}
    }}
    ";
                }
                finally
                {
                    ReturnStringBuilder(sb);
                }
            }

            private string GenCounterCreateMethods(CounterClass counterClass)
            {
                var sb = GetStringBuilder();
                try
                {
                    foreach (var counterMethod in counterClass.Methods)
                    {
                        // _ = sb.Append($"[DEEPAK] In counterMethod loop {counterMethod.Name}\n");
                        _ = sb.Append(GenCounterMethod(counterMethod));
                    }

                    return $@"
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        partial class {counterClass.Name} {counterClass.Constraints}
        {{
            {sb}
        }}
        ";
                }
                finally
                {
                    ReturnStringBuilder(sb);
                }
            }

            private string GenCounterClass(CounterMethod counterMethod)
            {
                return $@"
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public class {counterMethod.Type} : ICounterMetric
        {{
            private string[] _keyArray;
            private string[] _valArray;

            public {counterMethod.Type}({GenParameters(counterMethod)})
            {{
                int count = {counterMethod.AllParameters.Count};
                _keyArray = new string[count];
                _valArray = new string[count];

                {GenConstructorBody(counterMethod)}
            }}
            {GenClassProperties(counterMethod)}
        }}
        ";
            }

            private string GenCounterMethod(CounterMethod counterMethod)
            {
                //string eventName;
                //if (string.IsNullOrWhiteSpace(counterMethod.EventName))
                //{
                //    eventName = $"nameof({counterMethod.Name})";
                //}
                //else
                //{
                //    eventName = $"\"{counterMethod.EventName}\"";
                //}

                //string meterArg = _fieldName;
                //foreach (var p in counterMethod.AllParameters)
                //{
                //    if (p.IsMeter)
                //    {
                //        meterArg = p.Name;
                //        break;
                //    }
                //}

                return $@"
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial {counterMethod.Type} {counterMethod.Name}({GenParameters(counterMethod)})
            {{
                return new {counterMethod.Type}({GenParameters(counterMethod, false)});
            }}
        ";
            }

            private string GenFormatFunc(CounterMethod counterMethod)
            {
                var sb = GetStringBuilder();
                try
                {
                    string typeName;
                    if (counterMethod.RegularParameters.Count == 1)
                    {
                        typeName = $"global::{InternalNamespace}.CounterValues<{counterMethod.RegularParameters[0].Type}>";
                    }
                    else
                    {
                        _ = sb.Append($"global::{InternalNamespace}.CounterValues<");

                        foreach (var p in counterMethod.RegularParameters)
                        {
                            if (p != counterMethod.RegularParameters[0])
                            {
                                _ = sb.Append(", ");
                            }

                            _ = sb.Append(p.Type);
                        }

                        _ = sb.Append('>');
                        typeName = sb.ToString();
                        _ = sb.Clear();
                    }

                    int index = 0;
                    foreach (var param in counterMethod.RegularParameters)
                    {
                        if (counterMethod.RegularParameters.Count == 1)
                        {
                            _ = sb.Append($"                                var {param.Name} = _holder.Value;\n");
                        }
                        else
                        {
                            _ = sb.Append($"                                var {param.Name} = _holder.Value{index + 1};\n");
                            index++;
                        }
                    }

                    return $@"
                            [global::System.Runtime.CompilerServices.CompilerGenerated]
                            private static readonly global::System.Func<{typeName}, global::System.Exception?, string> _format{counterMethod.Name} = (_holder, _) =>
                            {{
{sb}
                            }};
                ";
                }
                finally
                {
                    ReturnStringBuilder(sb);
                }
            }

            private string GenParameters(CounterMethod counterMethod, bool includeType = true)
            {
                var sb = GetStringBuilder();
                try
                {
                    foreach (var p in counterMethod.AllParameters)
                    {
                        if (p != counterMethod.AllParameters[0])
                        {
                            _ = sb.Append(", ");
                        }

                        if (includeType)
                        {
                            _ = sb.Append($"{p.Type} {p.Name}");
                        }
                        else
                        {
                            _ = sb.Append($"{p.Name}");
                        }
                    }

                    return sb.ToString();
                }
                finally
                {
                    ReturnStringBuilder(sb);
                }
            }

            private string GenConstructorBody(CounterMethod counterMethod)
            {
                var sb = GetStringBuilder();
                try
                {
                    int index = 0;
                    foreach (var p in counterMethod.RegularParameters)
                    {
                        sb.Append($@"
                _keyArray[{index}] = ""{p.Name}"";
                _valArray[{index}] = {p.Name};"
                                );
                        index++;
                    }

                    return sb.ToString();
                }
                finally
                {
                    ReturnStringBuilder(sb);
                }
            }

            private string GenClassProperties(CounterMethod counterMethod)
            {
                var sb = GetStringBuilder();
                try
                {
                    int index = 0;
                    foreach (var p in counterMethod.AllParameters)
                    {
                        _ = sb.Append($@"
            public string {p.Name}
            {{
                get => _valArray[{index}];
                set => _valArray[{index}] = value;
            }}");

                        index++;
                    }

                    return sb.ToString();
                }
                finally
                {
                    ReturnStringBuilder(sb);
                }
            }

            private string NormalizeArgumentName(string name)
            {
                if (_pascalCaseArguments)
                {
                    var sb = GetStringBuilder();
                    try
                    {
                        _ = sb.Append(char.ToUpperInvariant(name[0]));
                        _ = sb.Append(name, 1, name.Length - 1);
                        name = sb.ToString();
                    }
                    finally
                    {
                        ReturnStringBuilder(sb);
                    }
                }

                return name;
            }

            private static string EscapeMessageString(string message)
            {
                return message
                    .Replace("\n", "\\n")
                    .Replace("\r", "\\r")
                    .Replace("\"", "\\\"");
            }

            private StringBuilder GetStringBuilder()
            {
                const int DefaultStringBuilderCapacity = 1024;

                if (_builders.Count == 0)
                {
                    return new StringBuilder(DefaultStringBuilderCapacity);
                }

                var sb = _builders.Pop();
                _ = sb.Clear();
                return sb;
            }

            private void ReturnStringBuilder(StringBuilder sb)
            {
                _builders.Push(sb);
            }
        }
    }
}
