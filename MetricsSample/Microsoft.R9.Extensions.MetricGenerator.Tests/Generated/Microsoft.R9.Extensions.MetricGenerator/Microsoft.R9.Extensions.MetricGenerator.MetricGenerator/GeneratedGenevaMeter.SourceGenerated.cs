// <auto-generated/>
#nullable enable
    using Microsoft.R9.Extensions.Meter;
    using System.Collections.Concurrent;

    namespace Microsoft.R9.Extensions.MetricGenerator.Tests.TestClasses
    {
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public static partial class GeneratedCounterMetricFactory
        {
            private static readonly ConcurrentDictionary<string, ICounterMetric<long>> _longCounterMetrics = new ();
            private static readonly ConcurrentDictionary<string, IValueRecorderMetric<long>> _longValueRecorderMetrics = new ();
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static Counter CreateCounter(Microsoft.R9.Extensions.Meter.IMeter meter)
            {
                string metricName = "Counter";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as Counter)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                
                                                );

                    return new Counter(cumulativeMetric);
                });

                return (metric as Counter)!;
            }

            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static CounterS1D0 CreateCounterS1D0(Microsoft.R9.Extensions.Meter.IMeter meter, string s1)
            {
                string metricName = "CounterS1D0";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as CounterS1D0)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                , "s1"
                                                );

                    return new CounterS1D0(cumulativeMetric, s1);
                });

                return (metric as CounterS1D0)!;
            }

            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static CounterS2D0 CreateCounterS2D0(Microsoft.R9.Extensions.Meter.IMeter meter, string s1, string s2)
            {
                string metricName = "CounterS2D0";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as CounterS2D0)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                , "s1", "s2"
                                                );

                    return new CounterS2D0(cumulativeMetric, s1, s2);
                });

                return (metric as CounterS2D0)!;
            }

            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static CounterS3D0 CreateCounterS3D0(Microsoft.R9.Extensions.Meter.IMeter meter, string s1, string s2, string s3)
            {
                string metricName = "CounterS3D0";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as CounterS3D0)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                , "s1", "s2", "s3"
                                                );

                    return new CounterS3D0(cumulativeMetric, s1, s2, s3);
                });

                return (metric as CounterS3D0)!;
            }

            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static CounterS0D1 CreateCounterS0D1(Microsoft.R9.Extensions.Meter.IMeter meter)
            {
                string metricName = "CounterS0D1";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as CounterS0D1)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                
                                                , "d1");

                    return new CounterS0D1(cumulativeMetric);
                });

                return (metric as CounterS0D1)!;
            }

            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static CounterS0D2 CreateCounterS0D2(Microsoft.R9.Extensions.Meter.IMeter meter)
            {
                string metricName = "CounterS0D2";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as CounterS0D2)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                
                                                , "d1", " d2");

                    return new CounterS0D2(cumulativeMetric);
                });

                return (metric as CounterS0D2)!;
            }

            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static CounterS1D1 CreateCounterS1D1(Microsoft.R9.Extensions.Meter.IMeter meter, string s1)
            {
                string metricName = "CounterS1D1";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as CounterS1D1)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                , "s1"
                                                , "d1");

                    return new CounterS1D1(cumulativeMetric, s1);
                });

                return (metric as CounterS1D1)!;
            }

            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static CounterS3D2 CreateCounterS3D2(Microsoft.R9.Extensions.Meter.IMeter meter, string s1, string s2, string s3)
            {
                string metricName = "CounterS3D2";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as CounterS3D2)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                , "s1", "s2", "s3"
                                                , "d1", "d2");

                    return new CounterS3D2(cumulativeMetric, s1, s2, s3);
                });

                return (metric as CounterS3D2)!;
            }

            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static CounterS8D2 CreateCounterS8D2(Microsoft.R9.Extensions.Meter.IMeter meter, string s1, string s2, string s3, string s4, string s5, string s6, string s7, string s8)
            {
                string metricName = "CounterS8D2";
                if (_longCounterMetrics.TryGetValue(metricName, out var counterMetric))
                {
                    return (counterMetric as CounterS8D2)!;
                }

                GenevaMeter genevaMeter = (meter as GenevaMeter)!;

                var metric = _longCounterMetrics.GetOrAdd(metricName, (key) => {
                    var cumulativeMetric = genevaMeter.MdmMetricFactory.CreateUInt64CumulativeMetric(
                                                MdmMetricFlags.CumulativeMetricDefault,
                                                genevaMeter.MonitoringAccount,
                                                genevaMeter.MetricNamespace,
                                                metricName
                                                , "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8"
                                                , "d1", "d2");

                    return new CounterS8D2(cumulativeMetric, s1, s2, s3, s4, s5, s6, s7, s8);
                });

                return (metric as CounterS8D2)!;
            }

        }
    
    }
    