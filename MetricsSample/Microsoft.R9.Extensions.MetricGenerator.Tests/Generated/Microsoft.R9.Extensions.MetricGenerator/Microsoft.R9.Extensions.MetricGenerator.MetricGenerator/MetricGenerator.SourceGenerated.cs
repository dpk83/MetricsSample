// <auto-generated/>
#nullable enable

    using System;
    using System.Collections.Generic;
    // using Microsoft.Cloud.InstrumentationFramework.Metrics.Extensions;
    using Microsoft.R9.Extensions.Meter;
    // using Microsoft.R9.Extensions.Meter.Geneva;

    namespace Microsoft.R9.Extensions.MetricGenerator.Tests.TestClasses
    {
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public static partial class ArgTestExtensions 
        {
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial Counter CreateCounter(Microsoft.R9.Extensions.Meter.IMeter meter)
            {
                return GeneratedCounterMetricFactory.CreateCounter(meter);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial CounterS1D0 CreateCounterS1D0(Microsoft.R9.Extensions.Meter.IMeter meter, string s1)
            {
                return GeneratedCounterMetricFactory.CreateCounterS1D0(meter, s1);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial CounterS2D0 CreateCounterS2D0(Microsoft.R9.Extensions.Meter.IMeter meter, string s1, string s2)
            {
                return GeneratedCounterMetricFactory.CreateCounterS2D0(meter, s1, s2);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial CounterS3D0 CreateCounterS3D0(Microsoft.R9.Extensions.Meter.IMeter meter, string s1, string s2, string s3)
            {
                return GeneratedCounterMetricFactory.CreateCounterS3D0(meter, s1, s2, s3);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial CounterS0D1 CreateCounterS0D1(Microsoft.R9.Extensions.Meter.IMeter meter)
            {
                return GeneratedCounterMetricFactory.CreateCounterS0D1(meter);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial CounterS0D2 CreateCounterS0D2(Microsoft.R9.Extensions.Meter.IMeter meter)
            {
                return GeneratedCounterMetricFactory.CreateCounterS0D2(meter);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial CounterS1D1 CreateCounterS1D1(Microsoft.R9.Extensions.Meter.IMeter meter, string s1)
            {
                return GeneratedCounterMetricFactory.CreateCounterS1D1(meter, s1);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial CounterS3D2 CreateCounterS3D2(Microsoft.R9.Extensions.Meter.IMeter meter, string s1, string s2, string s3)
            {
                return GeneratedCounterMetricFactory.CreateCounterS3D2(meter, s1, s2, s3);
            }
            
            [global::System.Runtime.CompilerServices.CompilerGenerated]
            public static partial CounterS8D2 CreateCounterS8D2(Microsoft.R9.Extensions.Meter.IMeter meter, string s1, string s2, string s3, string s4, string s5, string s6, string s7, string s8)
            {
                return GeneratedCounterMetricFactory.CreateCounterS8D2(meter, s1, s2, s3, s4, s5, s6, s7, s8);
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class Counter : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues0D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues0D, ulong> CumulativeMetric { get; }

            public Counter
                (IMdmCumulativeMetric<DimensionValues0D, ulong> cumulativeMetric 
                )
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[0]; 
                _staticValArray = new string[0];

                _dynamicKeyArray = new string[0];  
                _dynamicValArray = new string[0];

                
            }
            
            
            public void Add(long value)
            {
                if (value != 0)
                {
                    
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create();
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class CounterS1D0 : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues1D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues1D, ulong> CumulativeMetric { get; }

            public CounterS1D0
                (IMdmCumulativeMetric<DimensionValues1D, ulong> cumulativeMetric 
                , string s1)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[1]; 
                _staticValArray = new string[1];

                _dynamicKeyArray = new string[0];  
                _dynamicValArray = new string[0];

                
                _staticKeyArray[0] = "s1";
                _staticValArray[0] = s1;
            }
            
            
            public void Add(long value)
            {
                if (value != 0)
                {
                    
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class CounterS2D0 : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues2D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues2D, ulong> CumulativeMetric { get; }

            public CounterS2D0
                (IMdmCumulativeMetric<DimensionValues2D, ulong> cumulativeMetric 
                , string s1, string s2)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[2]; 
                _staticValArray = new string[2];

                _dynamicKeyArray = new string[0];  
                _dynamicValArray = new string[0];

                
                _staticKeyArray[0] = "s1";
                _staticValArray[0] = s1;
                _staticKeyArray[1] = "s2";
                _staticValArray[1] = s2;
            }
            
            
            public void Add(long value)
            {
                if (value != 0)
                {
                    
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class CounterS3D0 : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues3D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues3D, ulong> CumulativeMetric { get; }

            public CounterS3D0
                (IMdmCumulativeMetric<DimensionValues3D, ulong> cumulativeMetric 
                , string s1, string s2, string s3)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[3]; 
                _staticValArray = new string[3];

                _dynamicKeyArray = new string[0];  
                _dynamicValArray = new string[0];

                
                _staticKeyArray[0] = "s1";
                _staticValArray[0] = s1;
                _staticKeyArray[1] = "s2";
                _staticValArray[1] = s2;
                _staticKeyArray[2] = "s3";
                _staticValArray[2] = s3;
            }
            
            
            public void Add(long value)
            {
                if (value != 0)
                {
                    
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class CounterS0D1 : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues1D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues1D, ulong> CumulativeMetric { get; }

            public CounterS0D1
                (IMdmCumulativeMetric<DimensionValues1D, ulong> cumulativeMetric 
                )
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[0]; 
                _staticValArray = new string[0];

                _dynamicKeyArray = new string[1];  
                _dynamicValArray = new string[1];

                

                _dynamicKeyArray[0] = "d1";
            }
            
            private string d1
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            
            public void Add(long value, string d1)
            {
                if (value != 0)
                {
                    
                    this.d1 = d1;
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_dynamicValArray[0]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class CounterS0D2 : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues2D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues2D, ulong> CumulativeMetric { get; }

            public CounterS0D2
                (IMdmCumulativeMetric<DimensionValues2D, ulong> cumulativeMetric 
                )
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[0]; 
                _staticValArray = new string[0];

                _dynamicKeyArray = new string[2];  
                _dynamicValArray = new string[2];

                

                _dynamicKeyArray[0] = "d1";

                _dynamicKeyArray[1] = " d2";
            }
            
            private string d1
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            private string  d2
            {
                get => _dynamicValArray[1];
                set { if (_dynamicValArray[1] != value) { _dynamicValArray[1] = value; _isDirty = true; } }
            }
            
            public void Add(long value, string d1, string  d2)
            {
                if (value != 0)
                {
                    
                    this.d1 = d1;
                    this. d2 =  d2;
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_dynamicValArray[0], _dynamicValArray[1]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class CounterS1D1 : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues2D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues2D, ulong> CumulativeMetric { get; }

            public CounterS1D1
                (IMdmCumulativeMetric<DimensionValues2D, ulong> cumulativeMetric 
                , string s1)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[1]; 
                _staticValArray = new string[1];

                _dynamicKeyArray = new string[1];  
                _dynamicValArray = new string[1];

                
                _staticKeyArray[0] = "s1";
                _staticValArray[0] = s1;

                _dynamicKeyArray[0] = "d1";
            }
            
            private string d1
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            
            public void Add(long value, string d1)
            {
                if (value != 0)
                {
                    
                    this.d1 = d1;
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _dynamicValArray[0]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class CounterS3D2 : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues5D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues5D, ulong> CumulativeMetric { get; }

            public CounterS3D2
                (IMdmCumulativeMetric<DimensionValues5D, ulong> cumulativeMetric 
                , string s1, string s2, string s3)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[3]; 
                _staticValArray = new string[3];

                _dynamicKeyArray = new string[2];  
                _dynamicValArray = new string[2];

                
                _staticKeyArray[0] = "s1";
                _staticValArray[0] = s1;
                _staticKeyArray[1] = "s2";
                _staticValArray[1] = s2;
                _staticKeyArray[2] = "s3";
                _staticValArray[2] = s3;

                _dynamicKeyArray[0] = "d1";

                _dynamicKeyArray[1] = "d2";
            }
            
            private string d1
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            private string d2
            {
                get => _dynamicValArray[1];
                set { if (_dynamicValArray[1] != value) { _dynamicValArray[1] = value; _isDirty = true; } }
            }
            
            public void Add(long value, string d1, string d2)
            {
                if (value != 0)
                {
                    
                    this.d1 = d1;
                    this.d2 = d2;
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _dynamicValArray[0], _dynamicValArray[1]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
        [global::System.Runtime.CompilerServices.CompilerGenerated]
        public partial class CounterS8D2 : ICounterMetric<long>
        {
            private string[] _staticKeyArray;
            private string[] _staticValArray;
            private string[] _dynamicKeyArray;
            private string[] _dynamicValArray;            

            private DimensionValues10D _defaultDimensionValues;
            private bool _isDirty = true;

            internal IMdmCumulativeMetric<DimensionValues10D, ulong> CumulativeMetric { get; }

            public CounterS8D2
                (IMdmCumulativeMetric<DimensionValues10D, ulong> cumulativeMetric 
                , string s1, string s2, string s3, string s4, string s5, string s6, string s7, string s8)
            {
                CumulativeMetric = cumulativeMetric ?? throw new ArgumentNullException(nameof(cumulativeMetric));
                _staticKeyArray = new string[8]; 
                _staticValArray = new string[8];

                _dynamicKeyArray = new string[2];  
                _dynamicValArray = new string[2];

                
                _staticKeyArray[0] = "s1";
                _staticValArray[0] = s1;
                _staticKeyArray[1] = "s2";
                _staticValArray[1] = s2;
                _staticKeyArray[2] = "s3";
                _staticValArray[2] = s3;
                _staticKeyArray[3] = "s4";
                _staticValArray[3] = s4;
                _staticKeyArray[4] = "s5";
                _staticValArray[4] = s5;
                _staticKeyArray[5] = "s6";
                _staticValArray[5] = s6;
                _staticKeyArray[6] = "s7";
                _staticValArray[6] = s7;
                _staticKeyArray[7] = "s8";
                _staticValArray[7] = s8;

                _dynamicKeyArray[0] = "d1";

                _dynamicKeyArray[1] = "d2";
            }
            
            private string d1
            {
                get => _dynamicValArray[0];
                set { if (_dynamicValArray[0] != value) { _dynamicValArray[0] = value; _isDirty = true; } }
            }
            private string d2
            {
                get => _dynamicValArray[1];
                set { if (_dynamicValArray[1] != value) { _dynamicValArray[1] = value; _isDirty = true; } }
            }
            
            public void Add(long value, string d1, string d2)
            {
                if (value != 0)
                {
                    
                    this.d1 = d1;
                    this.d2 = d2;
                    if (_isDirty)
                    {
                        _defaultDimensionValues = DimensionValues.Create(_staticValArray[0], _staticValArray[1], _staticValArray[2], _staticValArray[3], _staticValArray[4], _staticValArray[5], _staticValArray[6], _staticValArray[7], _dynamicValArray[0], _dynamicValArray[1]);
                        _isDirty = false;
                    }

                    _ = value > 0
                            ? CumulativeMetric.IncrementBy((ulong)value, _defaultDimensionValues)
                            : CumulativeMetric.DecrementBy((ulong)value, _defaultDimensionValues);
                        
                }
            }

            public void Add(long value, IList<(string key, string value)>? dimensions)
            {
                throw new NotImplementedException();
            }
            
        }
        
    }
    